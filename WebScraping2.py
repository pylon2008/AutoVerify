# Generated by the windmill services transformer
from windmill.authoring import WindmillTestClient

import sys
import mechanize
import cookielib
from bs4 import BeautifulSoup

import re, urlparse
from copy import copy

def get_image_info(client, my_massage):
    """
    Parse HTML page and extract featured image name and link
    """
    # Get Javascript updated HTML page
    response = client.commands.getPageText()
    #print 'type(response): ', type(response)
    #print 'response: ', response

##    fff = open('te.txt', 'w+')
##    fff.write( str(response) )
##    fff.close()

##    assert response['status']
##    assert response['result']

    # Create soup from HTML page and get desired information
    #soup = BeautifulSoup(response['result'], markupMassage=my_massage)
    #soup = BeautifulSoup(response['result'], markup="")
    soup = BeautifulSoup(response['result'])
    name = soup.find(id='caption_region').h3.string
    link = urlparse.urljoin('http://www.nasa.gov',\
                            soup.find(attrs='Full_Size')['href'])
    print name
    print link
    image_info = {'name': name, 'link': link}
    return image_info

def get_massage():
    """
    Provide extra data massage to solve HTML problems in BeautifulSoup
    """
    # Javascript code in ths page generates HTML markup
    # that isn't parsed correctly by BeautifulSoup.
    # To avoid this problem, all document.write fragments are removed
    #my_massage = copy(BeautifulSoup.MARKUP_MASSAGE)
    my_massage = copy([])
    my_massage.append((re.compile(u"document.write(.+);"), lambda match: ""))
    my_massage.append((re.compile(u'alt=".+">'), lambda match: ">"))
    return my_massage

def test_scrape_iotd_gallery():
    """
    Scrape NASA Image of the Day Gallery
    """
    print "begin test"
    # Extra data massage for BeautifulSoup
    my_massage = get_massage()

    # Open main gallery page
    client = WindmillTestClient(__name__)
    client.open(url='http://www.nasa.gov/multimedia/imagegallery/iotd.html')

    # Page isn't completely loaded until image gallery data
    # has been updated by javascript code
    client.waits.forElement(xpath=u"//div[@id='gallery_image_area']/img",timeout=30000)

    # Scrape all images information
    images_info = []
    counter = 0
    while True:
        counter += 1
        if counter >= 8:
            break
        imageThis = get_image_info(client, my_massage)

        # Break if image has been already scrapped
        # (that means that all images have been parsed
        # since they are ordered in a circular ring)
        if (len(images_info) > 0) and (imageThis['link'] == images_info[-1]['link']):
            break

        images_info.append(imageThis)

        # Click to get the information for the next image
        client.click(xpath=u"//div[@class='btn_image_next']")

    # Print results to stdout ordered by image name
    for image in images_info:
        #print str(image)
        print "name: ", image['name']
        print "link: ", image['link']
        print "\r\n\r\n"

